import json

import pytest

from robotoff.types import IngredientDetectionAnnotateBody, NutrientData


class TestNutrientData:

    def test_from_webcomponent_json(self):
        # real data generated by webcomponent
        nutrient_data = json.loads(
            """{
            "nutrients": {
                "energy-kj_100g": {
                    "value": "-",
                    "unit": null
                },
                "energy-kcal_100g": {
                    "value": "190",
                    "unit": "kcal"
                },
                "energy_100g": {
                    "value": "795",
                    "unit": "kcal"
                },
                "fat_100g": {
                    "value": "1.4",
                    "unit": "g"
                },
                "saturated-fat_100g": {
                    "value": "0.4",
                    "unit": "g"
                },
                "carbohydrates_100g": {
                    "value": "35",
                    "unit": "g"
                },
                "sugars_100g": {
                    "value": "1.1",
                    "unit": "g"
                },
                "fiber_100g": {
                    "value": "2.1",
                    "unit": "g"
                },
                "proteins_100g": {
                    "value": "traces",
                    "unit": "g"
                },
                "salt_100g": {
                    "value": "0.03",
                    "unit": "g"
                },
                "sodium_100g": {
                    "value": "0.012",
                    "unit": "g"
                }
            },
            "nutrition_data_per": "100g",
            "serving_size": "1/4 pack"
        }"""
        )
        NutrientData.model_validate(nutrient_data)


class TestIngredientDetectionAnnotateBody:
    def test_ingredient_detection_annotate_body_valid(self):
        body = IngredientDetectionAnnotateBody(
            annotation="ingredient",
            rotation=180,
            bounding_box=[0.1, 0.2, 0.5, 0.6],
        )
        assert body.annotation == "ingredient"
        assert body.rotation == 180
        assert body.bounding_box == [0.1, 0.2, 0.5, 0.6]

    def test_ingredient_detection_annotate_body_invalid_length(self):
        with pytest.raises(ValueError):
            IngredientDetectionAnnotateBody(
                annotation="ingredient",
                bounding_box=[0.1, 0.2, 0.5],
            )

    def test_ingredient_detection_annotate_body_invalid_coords(self):
        with pytest.raises(ValueError):
            IngredientDetectionAnnotateBody(
                annotation="ingredient",
                bounding_box=[0.1, 0.2, 1.5, 0.6],
            )

    def test_ingredient_detection_annotate_body_invalid_order(self):
        with pytest.raises(ValueError):
            IngredientDetectionAnnotateBody(
                annotation="ingredient",
                bounding_box=[0.5, 0.2, 0.1, 0.6],
            )
