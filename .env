COMPOSE_PATH_SEPARATOR=;
COMPOSE_FILE=docker-compose.yml;docker/dev.yml;docker/ml.yml

# Docker
RESTART_POLICY=no
# for dev only: connection to local product opener network
COMMON_NET_NAME=po_default

# User uid - in dev align this with your own user uid / gid
# see https://gist.github.com/alexgarel/6e6158ee869d6db2192e0441fd58576e
# OFF_UID=1000
# OFF_GID=1000

# Robotoff
TAG=latest

# Robotoff instance gives the environment, either `prod` or `dev`
# (`dev` by default).
# If `prod` is used, openfoodfacts.org domain will be used by default,
# and openfoodfacts.net if `dev` is used.
# Messages to Slack are only enabled if `ROBOTOFF_INSTANCE=prod`.
ROBOTOFF_INSTANCE=dev

# Overwrites the Product Opener domain used. If empty, the domain will
# be inferred from `ROBOTOFF_INSTANCE`
ROBOTOFF_TLD=net

# if you want to connect to a Product Opener dev instance on localhost, use:
# STATIC_DOMAIN=http://openfoodfacts.localhost
# ROBOTOFF_SCHEME=http  # for dev scheme is http

# for dev only on localhost
ROBOTOFF_EXPOSE=127.0.0.1:5500
EVENTS_API_URL=

# ElasticSearch
ELASTIC_HOST=elasticsearch
ELASTIC_USER=elastic
ELASTIC_PASSWORD=elastic

# Postgres
POSTGRES_HOST=postgres
POSTGRES_DB=robotoff
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
# Expose postgres on localhost for dev
# POSTGRES_EXPOSE=127.0.0.1:5432

# Triton ML inference server
TRITON_HOST=triton

# Fasttext (langid) inference server
FASTTEXT_HOST=fasttext

# InfluxDB
INFLUXDB_HOST=
INFLUXDB_PORT=8086
INFLUXDB_BUCKET=off_metrics
INFLUXDB_AUTH_TOKEN=
# on linux, this will work if you have an influxdb listening on 0.0.0.0
# INFLUXDB_HOST=host.docker.internal

# MongoDB (dev settings, using shared MongoDB instance by default)
# To use Product Opener instance, use following commented line
# MONGO_URI=mongodb://mongodb.po_default:27017
MONGO_URI=mongodb://mongodb:27017

# Local Redis, used to manage rq jobs
REDIS_HOST=redis
# Redis where Product Opener publishes updates in the Redis Stream
# We uses here the same Redis instance as the one used for rq jobs
# for simplicity, but in production it uses a different one.
REDIS_UPDATE_HOST=redis

# OpenFoodFacts API
OFF_PASSWORD=
OFF_USER=

# Utils
SENTRY_DSN=

# We need this envvar as the path is different in prod and local environments:
# we launch directly docker/ml.yml in preprod/prod, while it's part of docker-compose.yml
# in local environment
TRITON_MODELS_DIR=./models/triton
FASTTEXT_MODEL_DIR=./models

# Enable/disable MongoDB access. All insights/predictions are checked
# against MongoDB, we disable by default locally to be able to easily test
# image import
ENABLE_MONGODB_ACCESS=0

# gunicorn --auto-reload is not compatible with preload_app
# so it has to be disabled when developing, to allow hot reload
GUNICORN_PRELOAD_APP=0

# The log level for the robotoff service
LOG_LEVEL=DEBUG

# PostgreSQL configuration

# Use 16G in production
ROBOTOFF_POSTGRES_SHARED_BUFFERS=1GB
# Use 1G in production
ROBOTOFF_POSTGRES_WORK_MEM=64MB

CROP_ALLOWED_DOMAINS=static.openfoodfacts.org,openfoodfacts-images.s3.eu-west-3.amazonaws.com,images.openfoodfacts.org
