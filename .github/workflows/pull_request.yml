name: Robotoff code quality checks and unit tests

on:
  push:
    tags-ignore:
      - "**"
    paths:
      - "robotoff/**"
      - "data/**"
      - "tests/**"
  pull_request:
    paths:
      - "**/robotoff/**"
      - "data/**"
      - "tests/**"
      - "**.pot"
      - "**.po"

jobs:
  unit-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
        - "3.7"
        - "3.8"

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Taken from https://github.com/snok/install-poetry

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1.3
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      #----------------------------------------------
      # Run linters
      #----------------------------------------------
      - name: Toml config file quality
        run: poetry run toml-sort --check poetry.toml pyproject.toml

      - name: Code Quality Black
        run: poetry run black . --check

      - name: Code quality Flake8
        run: poetry run flake8 --format github

      - name: Code quality isort
        run: poetry run isort . --check

      - name: Typing check mypy
        run: poetry run mypy .
      #----------------------------------------------
      # Compile i18n
      #----------------------------------------------
      - name: Install gettext
        run: sudo apt-get install gettext

      - name: Compile translations
        run: (cd i18n && bash compile.sh)

      #----------------------------------------------
      # Launch tests
      #----------------------------------------------
      - name: Configure docker
        run: |
          echo "OFF_UID=$UID" >> .env
          echo "PYTHON_VERSION=${{ matrix.python-version }}" >> .env
      - name: Launch tests
        run: make tests

      #----------------------------------------------
      # Upload test coverage
      #----------------------------------------------
      - uses: codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
          directory: .cov

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # dev:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v3
  #     - name: Run developer workflow
  #       run: make dev
