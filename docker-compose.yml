version: "3.9"

x-robotoff-base:
  &robotoff-base
  restart: $RESTART_POLICY
  image: ghcr.io/openfoodfacts/robotoff:${TAG}
  volumes:
    - ./datasets:/opt/robotoff/datasets
    - ./tf_models:/opt/robotoff/tf_models
    - ./models:/opt/robotoff/models

x-robotoff-base-env:
  &robotoff-base-env
  ROBOTOFF_INSTANCE:
  ROBOTOFF_DOMAIN:
  ROBOTOFF_SCHEME:
  STATIC_OFF_DOMAIN:
  GUNICORN_NUM_WORKERS:
  ROBOTOFF_UPDATED_PRODUCT_WAIT:
  REDIS_HOST:
  POSTGRES_HOST:
  POSTGRES_DB:
  POSTGRES_USER:
  POSTGRES_PASSWORD:
  MONGO_URI:
  OFF_USER:
  OFF_PASSWORD:
  INFLUXDB_HOST:
  INFLUXDB_PORT:
  INFLUXDB_BUCKET:
  INFLUXDB_AUTH_TOKEN:
  SLACK_TOKEN:
  SENTRY_DSN:
  ELASTIC_HOST:
  ELASTIC_PASSWORD:
  ELASTIC_USER:
  TF_SERVING_HOST:
  TRITON_HOST:


services:
  api:
    <<: *robotoff-base
    environment: *robotoff-base-env
    mem_limit: 4g
    ports:
      - "${ROBOTOFF_EXPOSE:-5500}:5500"
    depends_on:
      - postgres

  worker_high:
    <<: *robotoff-base
    deploy:
      mode: replicated
      replicas: 2
    command: python -m robotoff run-worker robotoff-high
    environment: *robotoff-base-env
    depends_on:
      - postgres
    mem_limit: 8g

  worker_low:
    <<: *robotoff-base
    deploy:
      mode: replicated
      replicas: 2
    command: python -m robotoff run-worker robotoff-high robotoff-low
    environment: *robotoff-base-env
    depends_on:
      - postgres
    mem_limit: 8g

  scheduler:
    <<: *robotoff-base
    environment: *robotoff-base-env
    command: python -m robotoff run-scheduler
    mem_limit: 4g

  postgres:
    restart: $RESTART_POLICY
    image: postgres:11.2-alpine
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres-data:/var/lib/postgresql/data
    command: postgres -c shared_buffers=1024MB -c work_mem=64MB
    mem_limit: 4g
    shm_size: 1g
    ports:
      - "${POSTGRES_EXPOSE:-127.0.0.1:5432}:5432"

  redis:
    restart: $RESTART_POLICY
    image: redis:7.0.5-alpine
    volumes:
      - redis-data:/data
    environment:
      REDIS_ARGS: --save 60 1000 --appendonly yes
    mem_limit: 4g
    ports:
      - "${REDIS_EXPOSE:-127.0.0.1:6379}:6379"

  elasticsearch:
    restart: $RESTART_POLICY
    image: elasticsearch:8.5.3
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD
      - xpack.security.http.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 262144
        hard: 262144
    mem_limit: 15g
    volumes:
      - es-data:/usr/share/elasticsearch/data

volumes:
  postgres-data:
  es-data:
    name: ${COMPOSE_PROJECT_NAME:-robotoff}_es-data
  redis-data:
    name: ${COMPOSE_PROJECT_NAME:-robotoff}_redis-data

networks:
  default:
