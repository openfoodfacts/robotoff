openapi: 3.0.0
info:
  title: API Reference
  description: |
    Robotoff provides a simple API allowing consumers to fetch predictions and annotate them.

    All endpoints must be prefixed with `/api/v1`. The full URL is `https://robotoff.openfoodfacts.org/api/v1/{endpoint}`.

    Robotoff can interact with all Openfoodfacts products: Openfoodfacts, Openbeautyfacts, etc. and all environments (production, development, pro). The `server_domain` field should be used to specify the product/environment: `api.openfoodfacts.org` for OFF-prod, `api.openfoodfacts.net` for OFF-dev, `api.openbeautyfacts.org` for OBF-prod,...
  contact: {}
  version: "1.0"
servers:
  - url: https://robotoff.openfoodfacts.org/api/v1/
    description: Production server
  - url: https://robotoff.openfoodfacts.net/api/v1/
    description: Preproduction server

paths:
  /questions/{barcode}:
    get:
      tags:
        - Questions
      summary: Get questions for a given product
      operationId: getQuestionsBarcode
      parameters:
        - $ref: "#/components/parameters/barcode_path"
        - $ref: "#/components/parameters/server_domain"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/lang"
      responses:
        "200":
          description: "Questions about the requested product"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - "no_questions"
                      - "found"
                  questions:
                    type: array
                    items:
                      type: object

  /questions/random:
    get:
      tags:
        - Questions
      summary: Get random questions
      operationId: getQuestionsRandom
      parameters:
        - $ref: "#/components/parameters/lang"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/server_domain"
        - $ref: "#/components/parameters/insight_types"
        - $ref: "#/components/parameters/country"
        - $ref: "#/components/parameters/brands"
        - $ref: "#/components/parameters/value_tag"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/reserved_barcode"
        - $ref: "#/components/parameters/campaign"
      responses:
        "200":
          description: The queried insights
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - "no_questions"
                      - "found"
                  questions:
                    type: array
                    items:
                      type: object
                  count:
                    type: integer
                    description: The total number of results with the provided filters

  /questions/popular:
    get:
      tags:
        - Questions
      summary: Get questions about popular products
      description: |
        Questions are ranked by the product popularity (based on scan count).
      operationId: GetQuestionsPopular
      parameters:
        - $ref: "#/components/parameters/lang"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/server_domain"
        - $ref: "#/components/parameters/insight_types"
        - $ref: "#/components/parameters/country"
        - $ref: "#/components/parameters/brands"
        - $ref: "#/components/parameters/value_tag"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/reserved_barcode"
        - $ref: "#/components/parameters/campaign"
      responses:
        "200":
          description: ""
          content: {}
  /questions/unanswered:
    get:
      tags:
        - Questions
      summary: Get unanswered question counts
      description: |
        Get number of unanswered questions grouped by `value_tag`.
        The list is ordered from highest count to lowest.
      operationId: GetQuestionsUnanswered
      parameters:
        - name: count
          in: query
          description: The number of distinct `value_tag`s to return
          schema:
            type: number
            default: 25
            minimum: 1
        - $ref: "#/components/parameters/server_domain"
        - $ref: "#/components/parameters/insight_type"
        - $ref: "#/components/parameters/country"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/reserved_barcode"
        - $ref: "#/components/parameters/campaign"
      responses:
        "200":
          description: "The number of questions grouped by `value_tag`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: The total number of questions that meet the provided criteria
                  questions:
                    type: array
                    items:
                      oneOf:
                        - type: string
                          description: The `value_tag`
                        - type: integer
                          description: The number of questions for this `value_tag`
                  status:
                    type: string
                    description: The request status
                    enum:
                      - found
                      - no_questions
                required:
                  - count
                  - questions
                  - status

  /insights/random:
    get:
      tags:
        - Insights
      summary: Get a random insight
      operationId: GetInsightsRandom
      parameters:
        - name: count
          in: query
          description: The number of results to return
          schema:
            type: number
            default: 1
            minimum: 1
        - name: server_domain
          in: query
          description: The server domain
          schema:
            type: string
            default: api.openfoodfacts.org
        - $ref: "#/components/parameters/insight_type"
        - $ref: "#/components/parameters/country"
        - $ref: "#/components/parameters/value_tag"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  insights:
                    type: array
                    items:
                      $ref: "#/components/schemas/InsightSearchResult"

  /insights/{barcode}:
    get:
      tags:
        - Insights
      summary: Get all insights for a specific product
      operationId: Getallinsightsforaspecificproduct
      parameters:
        - $ref: "#/components/parameters/barcode_path"
      responses:
        "200":
          description: ""
          content: {}
  /insights/detail/{id}:
    get:
      tags:
        - Insights
      summary: Get a specific insight
      operationId: GetInsightsDetail
      parameters:
        - name: id
          in: path
          description: "ID of the insight"
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: ""
          content: {}
  /insights/annotate:
    post:
      tags:
        - Insights
      summary: Submit an annotation
      operationId: Submitanannotation
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                insight_id:
                  type: string
                  description: ID of the insight
                annotation:
                  type: integer
                  description: "Annotation of the prediction: 1 to accept the prediction, 0 to refuse it, and -1 for `unknown`"
                  enum:
                    - 0
                    - 1
                    - -1
                update:
                  type: integer
                  description: "Send the update to Openfoodfacts if `update=1`, don't send the update otherwise. This parameter is useful if the update is performed client-side"
                  default: 1
                  enum:
                    - 0
                    - 1
              required:
                - "insight_id"
                - "annotation"
      responses:
        "200":
          description: ""
          content: {}

  /images/crop:
    get:
      summary: Crop an image
      description: |
        This endpoint is currently only used to generate cropped logos on Hunger Games from a
        base image and cropping coordinates. Cropping coordinates are relative (between 0.
        and 1. inclusive), with (0, 0) being the upper left corner.
      tags:
        - Images
      parameters:
        - name: image_url
          in: query
          example: https://static.openfoodfacts.org/images/products/211/123/200/5508/3.jpg
          schema:
            type: string
            format: uri
        - name: y_min
          in: query
          example: 0.47795143723487854
          schema:
            type: number
            minimum: 0
            maximum: 1
        - name: x_min
          in: query
          example: 0.5583494305610657
          schema:
            type: number
            minimum: 0
            maximum: 1
        - name: y_max
          in: query
          example: 0.5653171539306641
          schema:
            type: number
            minimum: 0
            maximum: 1
        - name: x_max
          in: query
          example: 0.6795185804367065
          schema:
            type: number
            minimum: 0
            maximum: 1
      responses:
        "200":
          description: ""
          content:
            image/jpeg: {}

  /images/logos:
    get:
      tags:
        - Logos
      summary: Fetch logos
      description: Return details about requested logos
      parameters:
        - name: logo_ids
          description: Comma-separated string of logo IDs
          in: query
          schema:
            type: string
      responses:
        "200":
          description: The fetch results
          content:
            application/json:
              schema:
                type: object
                properties:
                  logos:
                    type: array
                    description: Details about requested logos
                  count:
                    type: number
                    description: Number of returned results
                required:
                  - logos
                  - count
  /images/logos/search:
    get:
      tags:
        - Logos
      summary: Search for logos
      description: |
        Search for logos detected using the universal-logo-detector model that 
        meet some criteria (annotation status, annotated, type,...)
      parameters:
        - name: count
          description: Number of results to return
          in: query
          schema:
            type: number
            default: 25
            minimum: 1
            maximum: 2000
        - name: type
          description: Filter by logo type
          in: query
          schema:
            type: string
          example: packager_code
        - name: barcode
          description: Filter by barcode
          in: query
          schema:
            type: number
        - name: value
          description: Filter by annotated value
          in: query
          example: lidl
          schema:
            type: string
        - name: taxonomy_value
          description:
            Filter by taxonomy value, i.e. the canonical value present is the associated taxonomy.
            This parameter is mutually exclusive with `value`, and should be used for `label` type.
          in: query
          example: en:organic
          schema:
            type: string
        - name: min_confidence
          description: Filter logos that have a confidence score above a threshold
          in: query
          schema:
            type: number
        - name: random
          description: If true, randomized result order
          in: query
          schema:
            type: boolean
            default: false
        - name: server_domain
          in: query
          description: The server domain
          schema:
            type: string
        - name: annotated
          description: The annotation status of the logo.
            If not provided, both annotated and non-annotated logos are returned
          in: query
          schema:
            type: boolean
            default: null
      responses:
        "200":
          description: The search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  logos:
                    type: array
                    description: Found logos
                  count:
                    type: number
                    description: Number of returned results
                required:
                  - logos
                  - count

  /predict/category:
    get:
      tags:
        - Predict
      summary: Predict categories for a product
      description: |
        Both `neural` and `matcher` categorizers are available.
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - type: object
                  properties:
                    barcode:
                      type: string
                      description: The barcode of the product to categorize
                      minLength: 1
                      example: 0748162621021
                    deepest_only:
                      type: boolean
                      description: |
                        If true, only return the deepest elements in the category taxonomy
                        (don't return categories that are parents of other predicted categories)
                    threshold:
                      type: number
                      description: |
                        The score above which we consider the category to be detected
                      default: 0.5
                    predictors:
                      type: array
                      description:
                        List of predictors to use, possible values are `matcher`
                        (simple matching algorithm) and `neural` (neural network categorizer)
                      items:
                        type: string
                        enum:
                          - neural
                          - matcher
                      example: ["neural", "matcher"]
                  required:
                    - barcode
                - type: object
                  properties:
                    product:
                      type: object
                      properties:
                        product_name:
                          type: string
                          minLength: 1
                          example: roasted chicken
                        ingredients_tags:
                          type: array
                          items:
                            type: string
                          example:
                            - "en:chicken"
                            - "en:salts"
                      required:
                        - product_name
                    lang:
                      type: string
                      minLength: 1
                      description: Language of the product name, required for matcher algorithm
                      example: en
                    deepest_only:
                      type: boolean
                      description: |
                        If true, only return the deepest elements in the category taxonomy
                        (don't return categories that are parents of other predicted categories)
                    threshold:
                      type: number
                      description: |
                        The score above which we consider the category to be detected
                      default: 0.5
                    predictors:
                      type: array
                      description:
                        List of predictors to use, possible values are `matcher`
                        (simple matching algorithm) and `neural` (neural network categorizer)
                      items:
                        type: string
                        enum:
                          - neural
                          - matcher
                      example: ["neural", "matcher"]
                  required:
                    - product
      responses:
        "200":
          description: the category predictions
          content:
            application/json:
              schema:
                type: object
                properties:
                  neural:
                    type: array
                    items:
                      type: object
                      properties:
                        value_tag:
                          type: string
                          description: The predicted `value_tag`
                          example: en:roast-chicken
                        confidence:
                          type: number
                          description: The confidence score of the model
                          example: 0.6
                      required:
                        - value_tag
                        - confidence
                  matcher:
                    type: array
                    items:
                      type: object
                      properties:
                        value_tag:
                          type: string
                          description: The predicted `value_tag`
                          example: en:roast-chicken
                        debug:
                          type: object
                          description: Additional debug information
                          properties:
                            pattern:
                              type: string
                              description: The pattern that matched the product name
                              example: roast chicken
                            lang:
                              type: string
                              description: The language of the matched pattern
                              example: en
                            product_name:
                              type: string
                              description: The product name that matched the category name
                              example: roasted chicken
                            processed_product_name:
                              type: string
                              description: The product name after preprocessing
                                (stemming, stop word removal,...)
                              example: roast chicken
                            category_name:
                              type: string
                              description:
                                The (localized) category name that matched the
                                product name
                              example: Roast chicken
                            start_idx:
                              type: integer
                              description: The string match start position
                              example: 0
                            end_idx:
                              type: integer
                              description: The string match end position
                              example: 13
                            is_full_match:
                              type: boolean
                              description:
                                If true, the processed product name matched completely with
                                the processed category name
                              example: true
                          required:
                            - pattern
                            - lang
                            - product_name
                            - processed_product_name
                            - category_name
                            - start_idx
                            - end_idx
                            - is_full_match
                      required:
                        - value_tag
                        - debug

components:
  schemas:
    InsightSearchResult:
      description: An insight search result as returned by /insights/random or /insights/{barcode}
      required:
        - id
        - type
        - barcode
        - countries
      type: object
      properties:
        id:
          type: string
          description: Insight ID
        type:
          type: string
          description: Insight type
        barcode:
          type: integer
          description: Barcode of the product
        countries:
          type: array
          description: country tags of the product
          items:
            type: string
      example:
        id: 3cd5aecd-edcc-4237-87d0-6595fc4e53c9
        type: label
        barcode: 9782012805866
  parameters:
    lang:
      name: lang
      in: query
      description: The language of the question/value
      schema:
        type: string
        default: en
    count:
      name: count
      in: query
      description: The number of questions to return
      schema:
        type: integer
        default: 1
        minimum: 1
    server_domain:
      name: server_domain
      in: query
      description: The server domain
      schema:
        type: string
        default: api.openfoodfacts.org
    insight_types:
      name: insight_types
      in: query
      description: Comma-separated list, filter by insight types
      schema:
        type: string
    insight_type:
      name: type
      in: query
      description: Filter by insight type
      schema:
        type: string
    country:
      name: country
      in: query
      description: Filter by country tag
      schema:
        type: string
      example: en:france
    brands:
      name: brands
      in: query
      description: Comma-separated list, filter by brands
      schema:
        type: string
    value_tag:
      name: value_tag
      in: query
      description: Filter by value tag, i.e the value that is going to be sent to Product Opener
      schema:
        type: string
      example: en:organic
    page:
      name: page
      in: query
      description: Page index to return (starting at 1)
      schema:
        type: integer
        default: 1
        minimum: 1
    reserved_barcode:
      name: reserved_barcode
      in: query
      description: If true, also return questions about products with reserved barcodes
      schema:
        type: boolean
        default: false
    campaign:
      name: campaign
      in: query
      description: Filter by annotation campaign.
        An annotation campaign allows to only retrieve questions about selected products, based on arbitrary criteria
      schema:
        type: string
        example: agribalyse-category
    barcode_path:
      name: barcode
      in: path
      required: true
      description: The barcode of the product
      schema:
        type: integer
        example: 5410041040807
tags:
  - name: Questions
  - name: Insights
    description: |
      An insight is a fact about a product that has been either extracted or inferred from the product pictures, characteristics,...
      If the insight is correct, the Openfoodfacts DB can be updated accordingly.

      Current insight types and their description can be found in [robotoff/insights/dataclass.py](https://github.com/openfoodfacts/robotoff/blob/master/robotoff/insights/dataclass.py).
