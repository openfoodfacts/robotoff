openapi: 3.0.0
info:
  title: API Reference
  description: |
    Robotoff provides a simple API allowing consumers to fetch predictions and annotate them.

    All endpoints must be prefixed with `/api/v1`. The full URL is `https://robotoff.openfoodfacts.org/api/v1/{endpoint}`.
  contact: {}
  version: "1.0"
servers:
  - url: https://robotoff.openfoodfacts.org/api/v1/
    description: Production server
  - url: https://robotoff.openfoodfacts.net/api/v1/
    description: Preproduction server

paths:
  /questions/{barcode}:
    get:
      tags:
        - Questions
      summary: Get questions for a given product
      description: |
        Questions are sorted by priority: we want questions with highest impact to be displayed first. The order is the following:
          - category
          - label
          - brand
          - remaining types
      parameters:
        - name: count
          in: query
          description: The number of questions to return
          schema:
            type: integer
            default: 1
            minimum: 1
        - $ref: "#/components/parameters/barcode_path"
        - $ref: "#/components/parameters/server_type"
        - $ref: "#/components/parameters/lang"
        - $ref: "#/components/parameters/insight_types"
      responses:
        "200":
          description: "Questions about the requested product"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - "no_questions"
                      - "found"
                  questions:
                    type: array
                    items:
                      type: object
  /questions:
    get:
      tags:
        - Questions
      summary: Fetch questions
      parameters:
        - $ref: "#/components/parameters/lang"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/server_type"
        - $ref: "#/components/parameters/insight_types"
        - $ref: "#/components/parameters/countries"
        - $ref: "#/components/parameters/brands"
        - $ref: "#/components/parameters/value_tag"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/reserved_barcode"
        - $ref: "#/components/parameters/campaigns"
        - $ref: "#/components/parameters/predictor"
        - name: order_by
          in: query
          description: |
            The field to use for ordering results:
              - confidence: order by (descending) model confidence, null confidence insights come last
              - popularity: order by (descending) popularity (=scan count)
              - random: use a random order
          schema:
            type: string
            default: popularity
            enum:
              - confidence
              - random
              - popularity
      responses:
        "200":
          description: The questions matching the filters
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - "no_questions"
                      - "found"
                  questions:
                    type: array
                    items:
                      type: object
                  count:
                    type: integer
                    description: The total number of results with the provided filters
  /questions/random:
    get:
      tags:
        - Questions
      summary: Get random questions
      deprecated: true
      parameters:
        - $ref: "#/components/parameters/lang"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/server_type"
        - $ref: "#/components/parameters/insight_types"
        - $ref: "#/components/parameters/countries"
        - $ref: "#/components/parameters/brands"
        - $ref: "#/components/parameters/value_tag"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/reserved_barcode"
        - $ref: "#/components/parameters/campaigns"
        - $ref: "#/components/parameters/predictor"
      responses:
        "200":
          description: The queried insights
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - "no_questions"
                      - "found"
                  questions:
                    type: array
                    items:
                      type: object
                  count:
                    type: integer
                    description: The total number of results with the provided filters
  /questions/popular:
    get:
      tags:
        - Questions
      summary: Get questions about popular products
      deprecated: true
      description: |
        Questions are ranked by the product popularity (based on scan count).
      parameters:
        - $ref: "#/components/parameters/lang"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/server_type"
        - $ref: "#/components/parameters/insight_types"
        - $ref: "#/components/parameters/countries"
        - $ref: "#/components/parameters/brands"
        - $ref: "#/components/parameters/value_tag"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/reserved_barcode"
        - $ref: "#/components/parameters/campaigns"
        - $ref: "#/components/parameters/predictor"
      responses:
        "200":
          description: ""
          content: {}
  /questions/unanswered:
    get:
      tags:
        - Questions
      summary: Get unanswered question counts
      description: |
        Get number of unanswered questions grouped by `value_tag`.
        The list is ordered from highest count to lowest.
      parameters:
        - name: count
          in: query
          description: The number of distinct `value_tag`s to return
          schema:
            type: number
            default: 25
            minimum: 1
        - $ref: "#/components/parameters/server_type"
        - $ref: "#/components/parameters/insight_type"
        - $ref: "#/components/parameters/countries"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/reserved_barcode"
        - $ref: "#/components/parameters/campaigns"
        - $ref: "#/components/parameters/predictor"
      responses:
        "200":
          description: "The number of questions grouped by `value_tag`"
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: The total number of questions that meet the provided criteria
                  questions:
                    type: array
                    items:
                      oneOf:
                        - type: string
                          description: The `value_tag`
                        - type: integer
                          description: The number of questions for this `value_tag`
                  status:
                    type: string
                    description: The request status
                    enum:
                      - found
                      - no_questions
                required:
                  - count
                  - questions
                  - status

  /predictions:
    get:
      tags:
        - Predictions
      summary: Get predictions
      parameters:
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/server_type"
        - $ref: "#/components/parameters/barcode_query_filter"
        - name: types
          in: query
          description: Comma-separated list, filter by prediction types
          schema:
            type: string
            example: brand,label
      responses:
        "200":
          description: The queried predictions
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - "no_predictions"
                      - "found"
                  predictions:
                    type: array
                    items:
                      type: object
                  count:
                    type: integer
                    description: The total number of results with the provided filters

  /insights/random:
    get:
      tags:
        - Insights
      summary: Get a random insight
      parameters:
        - $ref: "#/components/parameters/insight_type"
        - $ref: "#/components/parameters/countries"
        - $ref: "#/components/parameters/value_tag"
        - $ref: "#/components/parameters/server_type"
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/predictor"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: object
                properties:
                  insights:
                    type: array
                    items:
                      $ref: "#/components/schemas/InsightSearchResult"
  /insights/{barcode}:
    get:
      tags:
        - Insights
      summary: Get all insights for a specific product
      parameters:
        - $ref: "#/components/parameters/barcode_path"
        - $ref: "#/components/parameters/server_type"
      responses:
        "200":
          description: ""
          content: {}
  /insights/detail/{id}:
    get:
      tags:
        - Insights
      summary: Get a specific insight
      parameters:
        - name: id
          in: path
          description: "ID of the insight"
          required: true
          style: simple
          schema:
            type: string
      responses:
        "200":
          description: ""
          content: {}
  /insights/annotate:
    post:
      tags:
        - Insights
      summary: Submit an annotation
      description: |
        The annotation can be submitted as an anonymous user or as a registered user.
        If the user is anonymous, the annotation will be accounted as a vote, and several identical
        anonymous votes are required to apply the insight. If the vote is sent from a registered user,
        it is applied directly.

        To send the annotation as a registered user, send Open Food Facts credentials to the API using
        Basic Authentication: add a `Authorization: basic {ENCODED_BASE64}` header where `{ENCODED_BASE64}`
        is an base64-encoded string of `user:password`. Don't provide an authentication header for anonymous
        users.

        The annotation is an integer that can take 4 values: `0`, `1`, `2`, `-1`. `0` means the insight is incorrect
        (so it won't be applied), `1` means it is correct (so it will be applied) and `-1` means the insight
        won't be returned to the user (_skip_). `2` is used when user submit some data to the annotate endpoint 
        (for example in some cases of category annotation).
        
        We use the voting mecanism system to remember which insight to skip for a user (authenticated or not).
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                insight_id:
                  type: string
                  description: ID of the insight
                annotation:
                  type: integer
                  description: "Annotation of the prediction: 1 to accept the prediction, 0 to refuse it, and -1 for _skip_"
                  enum:
                    - 0
                    - 1
                    - -1
                update:
                  type: integer
                  description: "Send the update to Openfoodfacts if `update=1`, don't send the update otherwise. This parameter is useful if the update is performed client-side"
                  default: 1
                  enum:
                    - 0
                    - 1
              required:
                - "insight_id"
                - "annotation"
      responses:
        "200":
          description: ""
          content: {}
  /insights/dump:
    get:
      summary: Generate a CSV dump
      description: |
        Generate a CSV dump of insights with specific criteria.
        If more than 10,000 insights match provided criteria and `count` is not provided, a `HTTP 400` is returned
      tags:
        - Insights
      parameters:
          - $ref: "#/components/parameters/server_type"
          - $ref: "#/components/parameters/value_tag"
          - $ref: "#/components/parameters/insight_types"
          - $ref: "#/components/parameters/barcode_query_filter"
          - name: annotated
            description: The annotation status of the insight.
              If not provided, both annotated and non-annotated insights are returned
            in: query
            schema:
              type: boolean
              default: null
          - name: count
            description: Maximum number of insights to return.
              If not provided, an HTTP 400 response may be returned if more than 10,000 insights match the criteria
            in: query
            schema:
              type: integer
              default: null
              minimum: 0
              maximum: 10000
      responses:
        "200":
          description: The CSV dump
          content:
            text/csv:
              schema:
                type: string
        "204":
          description: HTTP 204 is returned if no insights were found
        "400":
          description: HTTP 400 is returned if more than 10,000 insights match the criteria and `count` is not provided

  /images/crop:
    get:
      summary: Crop an image
      description: |
        This endpoint is currently only used to generate cropped logos on Hunger Games from a
        base image and cropping coordinates. Cropping coordinates are relative (between 0.
        and 1. inclusive), with (0, 0) being the upper left corner.
      tags:
        - Images
      parameters:
        - name: image_url
          in: query
          example: https://static.openfoodfacts.org/images/products/211/123/200/5508/3.jpg
          schema:
            type: string
            format: uri
        - name: y_min
          in: query
          example: 0.47795143723487854
          schema:
            type: number
            minimum: 0
            maximum: 1
        - name: x_min
          in: query
          example: 0.5583494305610657
          schema:
            type: number
            minimum: 0
            maximum: 1
        - name: y_max
          in: query
          example: 0.5653171539306641
          schema:
            type: number
            minimum: 0
            maximum: 1
        - name: x_max
          in: query
          example: 0.6795185804367065
          schema:
            type: number
            minimum: 0
            maximum: 1
      responses:
        "200":
          description: ""
          content:
            image/jpeg:
              schema:
                type: string
                format: binary

  /image_predictions:
    get:
      tags:
        - Image Predictions
      summary: Get image predictions
      parameters:
        - $ref: "#/components/parameters/count"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/server_type"
        - $ref: "#/components/parameters/barcode_query_filter"
        - name: with_logo
          description: if True, only return image predictions that have associated logos (only valid for universal-logo-detector image predictions)
          in: query
          schema:
            type: boolean
            default: false
        - name: model_name
          description: filter by name of the image predictor model
          in: query
          schema:
            type: string
            enum:
              - universal-logo-detector
              - nutrition-table
              - nutriscore
        - name: type
          description: filter by type of the image predictor model, currently only 'object_detection'
          in: query
          schema:
            type: string
            enum:
              - 'object_detection'
        - name: model_version
          description: filter by model version value
          in: query
          schema:
            type: string
        - name: min_confidence
          description: filter by minimum confidence score value
          in: query
          schema:
            type: number
            minimum: 0.0
            maximum: 1.0

      responses:
        "200":
          description: The queried image predictions
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - "no_image_predictions"
                      - "found"
                  image_predictions:
                    type: array
                    items:
                      type: object
                  count:
                    type: integer
                    description: The total number of results with the provided filters

  /images/logos:
    get:
      tags:
        - Logos
      summary: Fetch logos
      description: Return details about requested logos (maximum 500 logos can be fetched per request).
      parameters:
        - name: logo_ids
          description: Comma-separated string of logo IDs
          in: query
          schema:
            type: string
      responses:
        "200":
          description: The fetch results
          content:
            application/json:
              schema:
                type: object
                properties:
                  logos:
                    type: array
                    description: Details about requested logos
                  count:
                    type: number
                    description: Number of returned results
                required:
                  - logos
                  - count
  /images/logos/search:
    get:
      tags:
        - Logos
      summary: Search for logos
      description: |
        Search for logos detected using the universal-logo-detector model that 
        meet some criteria (annotation status, annotated, type,...)
      parameters:
        - $ref: "#/components/parameters/server_type"
        - $ref: "#/components/parameters/barcode_query_filter"
        - name: count
          description: Number of results to return
          in: query
          schema:
            type: number
            default: 25
            minimum: 1
            maximum: 2000
        - name: type
          description: Filter by logo type
          in: query
          schema:
            type: string
          example: packager_code
        - name: value
          description: Filter by annotated value
          in: query
          example: lidl
          schema:
            type: string
        - name: taxonomy_value
          description:
            Filter by taxonomy value, i.e. the canonical value present is the associated taxonomy.
            This parameter is mutually exclusive with `value`, and should be used for `label` type.
          in: query
          example: en:organic
          schema:
            type: string
        - name: min_confidence
          description: Filter logos that have a confidence score above a threshold
          in: query
          schema:
            type: number
        - name: random
          description: If true, randomized result order
          in: query
          schema:
            type: boolean
            default: false
        - name: annotated
          description: The annotation status of the logo.
            If not provided, both annotated and non-annotated logos are returned
          in: query
          schema:
            type: boolean
            default: null
      responses:
        "200":
          description: The search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  logos:
                    type: array
                    description: Found logos
                  count:
                    type: number
                    description: Number of returned results
                required:
                  - logos
                  - count
  /images/logos/{logo_id}/reset:
    post:
      tags:
        - Logos
      summary: Reset logo annotation
      description: Reset logo annotations, and delete all annotation-associated predictions and insights
      parameters:
        - name: logo_id
          in: path
          required: true
          description: The ID of the logo whose annotation to reset
          schema:
            type: integer
            example: 1
      responses:
        "204":
          description: HTTP 204 is returned if the reset operation was successful
        "404":
          description: HTTP 404 is returned if the `logo_id` was not found

  /ann/search:
    get:
      tags:
        - ANN
      summary: Approximate search for nearest neighbors of a random query logo
      description: Return ID and distance of each logo found, the number of neighbors returned and the ID of the query logo.
      parameters:
        - $ref: "#/components/parameters/ann_search_count"
        - $ref: "#/components/parameters/server_type"
      responses:
        "200":
          description: Response from ANN search
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoANNSearchResponse"
  /ann/search/{logo_id:int}:
      get:
        tags:
          - ANN
        summary: Approximate search for nearest neighbors of a specified query logo
        description: Return ID and distance of each logo found, the number of neighbors returned and the ID of the query logo.
        parameters:
          - $ref: "#/components/parameters/ann_search_count"
          - $ref: "#/components/parameters/server_type"
        responses:
          "200":
            description: Response from ANN search
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/LogoANNSearchResponse"

  /predict/category:
    post:
      tags:
        - Predict
      summary: Predict categories for a product
      description: |
        Predictions are performed using a neural model.
        As input, you can either provide:
        
        - the `barcode` of a product: Robotoff will fetch the product from
          Product Opener and will use this data as inputs to predict categories.
        - expected inputs under a `product` key. The neural category model
          accepts the following fields as input: `product_name`, `ingredients_tags`,
          `ocr`, `nutriments`, `image_embeddings`. All fields are optional (but you should at least provide one).
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - type: object
                  properties:
                    barcode:
                      type: string
                      description: The barcode of the product to categorize
                      minLength: 1
                      example: 0748162621021
                    server_type:
                      type: string
                      description: |
                        The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
                        Only 'off' is currently supported for category prediction
                      default: 'off'
                      enum:
                        - 'off'
                        - 'obf'
                        - 'opff'
                        - 'opf'
                    deepest_only:
                      type: boolean
                      description: |
                        If true, only return the deepest elements in the category taxonomy
                        (don't return categories that are parents of other predicted categories)
                    threshold:
                      type: number
                      description: |
                        The score above which we consider the category to be detected
                      default: 0.5
                  required:
                    - barcode
                - type: object
                  properties:
                    product:
                      type: object
                      description: |
                        product information used as model input. All fields are optional, but at
                        least one field must be provided. 
                      properties:
                        product_name:
                          type: string
                          minLength: 1
                          example: roasted chicken
                        ingredients_tags:
                          description: the ingredient list, as an ordered list of ingredient tags
                          type: array
                          items:
                            type: string
                          example:
                            - "en:chicken"
                            - "en:salts"
                        image_embeddings:
                          description: |
                            Embeddings of the 10 most recent product images generated with clip-vit-base-patch32 model.
                            Each item of the list is the embedding of a single image, provided as a list of dimension 512.
                            Shape: (num_images, 512)
                          type: array
                          maxItems: 10
                          items:
                            description: a single image embedding
                            type: array
                            items:
                              type: number
                            minItems: 512
                            maxItems: 512
                        ocr:
                          description: |
                            A list of string corresponding to the text extracted from the product images with OCR.
                            Each element of the list is the text of a single image, the list order doesn't affect predictions.
                            We use OCR text to detect ingredient mentions and use it as a model input.
                            For optimal results, this field should be provided even if `ingredients_tags` is provided. 
                          type: array
                          items:
                            type: string
                        nutriments:
                          type: object
                          description: |
                            Nutriment values. These fields have exactly the same meaning as those of Product Opener.
                            All fields are optional, only send data for the field for which the value is not missing.
                          properties:
                            fat_100g:
                              type: number
                            saturated-fat_100g:
                              type: number
                            carbohydrates_100g:
                              type: number
                            sugars_100g:
                              type: number
                            fiber_100g:
                              type: number
                            proteins_100g:
                              type: number
                            salt_100g:
                              type: number
                            energy-kcal_100g:
                              type: number
                            fruits-vegetables-nuts_100g:
                              type: number
                          additionalProperties: false
                      minProperties: 1  # at least one input must be provided
                    deepest_only:
                      type: boolean
                      description: |
                        If true, only return the deepest elements in the category taxonomy
                        (don't return categories that are parents of other predicted categories)
                    threshold:
                      type: number
                      description: |
                        The score above which we consider the category to be detected
                      default: 0.5
                  required:
                    - product
      responses:
        "200":
          description: the category predictions
          content:
            application/json:
              schema:
                type: object
                properties:
                  neural:
                    type: array
                    items:
                      type: object
                      properties:
                        value_tag:
                          type: string
                          description: The predicted `value_tag`
                          example: en:roast-chicken
                        confidence:
                          type: number
                          description: The confidence score of the model
                          example: 0.6
                      required:
                        - value_tag
                        - confidence

  /predict/nutrition:
    get:
      tags:
        - Predict
      summary: Extract nutritional information from an image
      description: |
        We currently only use the OCR text as input, and detect nutrient-value pairs if they are consecutive
        to each other in the OCR text (ex: "protein: 10.5g, fat: 2.1g").
      parameters:
        - $ref: "#/components/parameters/barcode"
        - $ref: "#/components/parameters/server_type"
        - name: image_ids
          in: query
          required: false
          description: |
            a comma-separated list of IDs of images to extract nutritional information from.
            If not provided, the 10 most recent images will be used.
          schema:
            type: string
            example: "1,2,5"
      responses:
        "200":
          description: the extracted nutritional information
          content:
            application/json:
              schema:
                type: object
                description: |
                  the extracted nutritional information from provided (or 10 most recent by default) images.
                  The predictions are ordered, predictions from most recent images come first.
                properties:
                  predictions:
                    type: object
                    properties:
                      nutrients:
                        type: object
                        description: |
                          a dict mapping nutrient name (`energy`, `fat`,...) to a list of dict containing detected nutritional information.
                          The list contains as many elements as the number of detected values for this nutrient. Each element of the list
                          has the following fields:
                            - `raw`: string of the full detected pattern (ex: `Valeur énergétique: 245 kj`)
                            - `nutrient`: nutrient mention (`energy`, `saturated_fat`,...)
                            - `value`: nutrient value, should be an number (example: `245`)
                            - `unit`: nutrient unit associated with the value (one of `kj`, `kcal`, `g`)
                      predictor_version:
                        type: string
                        description: identifier of the version of the predictor used
                        example: "1"
                      predictor:
                        type: string
                        description: predictor used to generate this prediction
                        example: "regex"
                      source_image:
                        type: string
                        description: the path of the image the nutrient prediction was generated from
                    required:
                      - "nutrients"
                      - "predictor"
                      - "predictor_version"
                      - "source_image"
                  image_ids:
                    type: array
                    description: |
                      list of the IDs of images that were used as input analyzed
                    items:
                      type: number
                  errors:
                    type: array
                    description: a list of errors that occured during processing
                    items:
                      type: object
                      properties:
                        error:
                          type: string
                          description: the identifier of the error
                        error_description:
                          type: string
                          description: a full description of the error that occured
                required:
                  - "predictions"
                  - "image_ids"
        "400":
          description: "An HTTP 400 is returned if the provided parameters are invalid"
  /predict/ocr_prediction:
    get:
      tags:
        - Predict
      summary: Generate OCR predictions an OCR JSON
      parameters:
        - name: ocr_url
          in: query
          required: true
          description: The URL of the OCR JSON to use for extraction
          schema:
            type: string
            example: https://static.openfoodfacts.org/images/products/216/124/000/3089/1.json
            format: uri
        - $ref: "#/components/parameters/server_type"
        - name: prediction_types
          in: query
          required: false
          description: |
            a comma-separated list of prediction types to use for extraction. If not provided, we use the default:
            set of OCR prediction types (see `DEFAULT_OCR_PREDICTION_TYPES` variable in Robotoff codebase)
          schema:
            type: string
            example: "category,label"
      responses:
        "200":
          description: the extracted predictions
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    title: Successful response
                    description: the extracted predictions
                    properties:
                      predictions:
                        type: array
                        description: a list of extracted predictions
                        items:
                          $ref: "#/components/schemas/Prediction"
                    required:
                      - "predictions"

        "400":
          description: "An HTTP 400 is returned if the provided parameters are invalid"

  /predict/lang:
    get:
      tags:
        - Predict
      summary: Predict the language of a text
      description: |
        Predict the language of a text using a neural model.
        A POST version of this endpoint is also available, it accepts a JSON body with exactly the
        same parameters.

        Use the POST version if you want to predict the language of a long text, as the GET version
        has a limit on the length of the text that can be provided.
      parameters:
        - name: text
          in: query
          required: true
          description: The text to predict language of
          schema:
            type: string
            example: "hello world"
        - name: k
          in: query
          required: false
          description: |
            the number of predictions to return
          schema:
            type: integer
            default: 10
            minimum: 1
        - name: threshold
          in: query
          required: false
          description: |
            the minimum probability for a language to be returned
          schema:
            type: number
            default: 0.01
            minimum: 0
            maximum: 1
      responses:
        "200":
          description: the predicted languages
          content:
            application/json:
              schema:
                type: object
                properties:
                  predictions:
                    type: array
                    description: a list of predicted languages, sorted by descending probability
                    items:
                      type: object
                      properties:
                        lang:
                          type: string
                          description: the predicted language (2-letter code)
                          example: "en"
                        confidence:
                          type: number
                          description: the probability of the predicted language
                          example: 0.9
        "400":
          description: "An HTTP 400 is returned if the provided parameters are invalid"

  /predict/lang/product:
    get:
      tags:
        - Predict
      summary: Predict the languages of the product
      description: |
        Return the most common languages present on the product images, based on word-level
        language detection from product images.

        Language detection is not performed on the fly, but is based on predictions of type
        `image_lang` stored in the `prediction` table.

      parameters:
        - $ref: "#/components/parameters/barcode"
        - $ref: "#/components/parameters/server_type"
          in: query
          required: false
          description: |
            the minimum probability for a language to be returned
          schema:
            type: number
            default: 0.01
            minimum: 0
            maximum: 1
      responses:
        "200":
          description: |
            The predicted languages, sorted by descending probability.
          content:
            application/json:
              schema:
                type: object
                properties:
                  counts:
                    type: array
                    description: |
                      the number of words detected for each language, over all images,
                      sorted by descending count
                    items:
                      type: object
                      properties:
                        lang:
                          type: string
                          description: the predicted language (2-letter code). `null` if the language could not be detected.
                          example: "en"
                        count:
                          type: number
                          description: the number of words for which this language was detected over all images
                          example: 10
                  percent:
                    type: array
                    description: |
                      the percentage of words detected for each language, over all images,
                      sorted by descending percentage
                    items:
                      type: object
                      properties:
                        lang:
                          type: string
                          description: the predicted language (2-letter code). `null` if the language could not be detected.
                          example: "en"
                        percent:
                          type: number
                          description: the percentage of words for which the language was detected over all images
                          minimum: 0
                          maximum: 100
                          example: 80.5
                  image_ids:
                    type: array
                    description: |
                      the IDs of the images that were used to generate the predictions
                    items:
                      type: number
                      example: 1
                      description: the ID of an image
        "400":
          description: "An HTTP 400 is returned if the provided parameters are invalid"


components:
  schemas:
    LogoANNSearchResponse:
      type: object
      properties:
        results:
          type: array
          items:
            properties:
              logo_id:
                type: integer
                description: ID of the result logo
                example: 1
              distance:
                type: number
                description: |
                  distance between the query logo and the result logo (closer to 0 means a more similar logo)
                example: 0.1
            required:
              - logo_id
              - distance
          description: Each item corresponds to a neighbor logo
        count:
          type: integer
          description: Number of returned results
        query_logo_id:
          type: integer
          description: ID of the query logo
      required:
        - results
        - count
        - query_logo_id
    InsightSearchResult:
      description: An insight search result as returned by /insights/random or /insights/{barcode}
      required:
        - id
        - type
        - barcode
        - countries
      type: object
      properties:
        id:
          type: string
          description: Insight ID
        type:
          type: string
          description: Insight type
        barcode:
          type: integer
          description: Barcode of the product
        countries:
          type: array
          description: country tags of the product
          items:
            type: string
      example:
        id: 3cd5aecd-edcc-4237-87d0-6595fc4e53c9
        type: label
        barcode: 9782012805866
    ServerDomainParameter:
      description: |
        The server domain associated with the image/product.

        If the `server_domain` top level domain does not match the server configuration,
        an HTTP 400 error will be raised
      type: string
      example: "api.openfoodfacts.org"
      enum:
        - "api.openfoodfacts.org"
        - "api.openbeautyfacts.org"
        - "api.openproductfacts.org"
        - "api.openpetfoodfacts.org"
        - "api.pro.openfoodfacts.org"
    Prediction:
      type: object
      description: a Robotoff Prediction
      properties:
        barcode:
          type: string
          description: barcode of the product
          example: "5410041040807"
        type:
          type: string
          description: the prediction type
          example: category
        timestamp:
          type: string
          format: "date-time"
          description: datetime of creation of the prediction
          example: "2023-05-13 02:10:09.107262"
        data:
          type: object
          description: |
            a JSON structure containing prediction data. It either complements `value` and `value_tag`
            with additional data or contains the full prediction data.
        value_tag:
          type: string
          description: |
            the value tag of the prediction. The use of this field depends of the prediction type,
            but it contains most of the time the canonical tag that should be sent to Product Opener.
            For example, for a category prediction, `value_tag` can be `en:beverages`.
          example: "en:beverages"
        value:
          type: string
          description: |
            the value of the prediction. It is used if no canonical tag can be used
            for the prediction type. For example, we use it to store the detected product weight
            value (example: `100 g`)
          example: null
        automatic_processing:
          type: boolean
          example: false
          description: |
            a boolean indicating whether we're confident enough in the prediction to apply it
            automatically in Open Food Facts without human supervision. This does not mean it will
            indeed be applied automatically, please refer to the import mechanism description in the
            documentation to know how automatic processing works.
        source_image:
          type: string
          description: |
            the path of the image the prediction was generated from.
            May be null, it is mainly provided for OCR and object detection-based predictions.
          example: "541/004/104/0807/3.jpg"
        id:
          type: number
          example: 1522429
          description: unique ID of the prediction in the PostgreSQL DB
        predictor_version:
          type: string
          description: |
            this is a version ID that is used to know when to replace predictions in database
            by new ones during import, and when to keep them. It is either an incrementing integer
            (for regex-based predictions) or the version of the model that generated the predictions.
          example: "keras-image-embeddings-3.0"
        predictor:
          type: string
          example: neural
          description: |
            name of the predictor that generated the prediction. Every insight type has its own `predictor`s, but most common ones are:
              - `universal-logo-detector` for predictions generated by the nearest-neighbors logo detector
              - `flashtext` for all predictions generated using flashtext library
              - `regex` for all predictions generated using simple regex
        server_type:
          type: string
          example: "off"
          description: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),...
          enum:
            - 'off'
            - 'obf'
            - 'opff'
            - 'opf'
            - 'off_pro'
        confidence:
          type: string
          format: number
          example: 0.95
          description: |
            confidence score of the prediction, it is only provided for ML-based predictions. It may be null.

  parameters:
    lang:
      name: lang
      in: query
      description: The language of the question/value
      schema:
        type: string
        default: en
    count:
      name: count
      in: query
      description: The number of items to return
      schema:
        type: integer
        default: 25
        minimum: 1
    barcode_query_filter:
      name: barcode
      in: query
      description: Filter by barcode value
      schema:
        type: string
        example: "5410041040807"
    server_type:
      name: server_type
      in: query
      required: false
      description: The server type (=project) to use, such as 'off' (Open Food Facts), 'obf' (Open Beauty Facts),... 
      schema:
        type: string
        default: 'off'
        enum:
          - 'off'
          - 'obf'
          - 'opff'
          - 'opf'
          - 'off_pro'
    insight_types:
      name: insight_types
      in: query
      description: Comma-separated list, filter by insight types
      schema:
        type: string
        example: brand,label
    insight_type:
      name: type
      in: query
      description: Filter by insight type
      schema:
        type: string
    countries:
      name: countries
      in: query
      description: Comma separated list, filter by country value (2-letter code)
      schema:
        type: string
      example: uk
    brands:
      name: brands
      in: query
      description: Comma-separated list, filter by brands
      schema:
        type: string
    value_tag:
      name: value_tag
      in: query
      description: Filter by value tag, i.e the value that is going to be sent to Product Opener
      schema:
        type: string
      example: en:organic
    page:
      name: page
      in: query
      description: Page index to return (starting at 1)
      schema:
        type: integer
        default: 1
        minimum: 1
    reserved_barcode:
      name: reserved_barcode
      in: query
      description: If true, also return questions about products with reserved barcodes
      schema:
        type: boolean
        default: false
    campaigns:
      name: campaigns
      in: query
      description: Filter by annotation campaigns (the insight must have all the campaigns)
        An annotation campaigns allows to only retrieve questions about selected products, based on arbitrary criteria
      schema:
        type: string
        example: agribalyse-category
    predictor:
      name: predictor
      in: query
      description: Filter by predictor value
        A predictor refers to the model/method that was used to generate the prediction.
      schema:
        type: string
        example: universal-logo-detector
    ann_search_count:
      name: count
      in: query
      description: Number of neighbors to return
      schema:
        type: integer
        default: 25
        minimum: 1
        maximum: 2000
    barcode_path:
      name: barcode
      in: path
      required: true
      description: The barcode of the product
      schema:
        type: integer
        example: 5410041040807
    barcode:
      name: barcode
      in: query
      required: true
      description: The barcode of the product
      schema:
        type: integer
        example: 5410041040807
tags:
  - name: Questions
  - name: Insights
    description: |
      An insight is a fact about a product that has been either extracted or inferred from the product pictures, characteristics,...
      If the insight is correct, the Openfoodfacts DB can be updated accordingly.

      Current insight types and their description can be found in [robotoff/insights/dataclass.py](https://github.com/openfoodfacts/robotoff/blob/main/robotoff/insights/dataclass.py).
